<?xml version="1.0" encoding="utf-8"?>
<quickMonTemplate>
	<template name="File/Directory check" type="CollectorHost" class="CollectorHost" description="Checks for file(s) or directory(s)">
		<collectorHost uniqueId="" dependOnParentId="" name="File/Directory check" enabled="True" expandOnStart="Auto" childCheckBehaviour="OnlyRunOnSuccess" runAsEnabled="False" runAs="">
			<!-- Alerting -->
			<alerting>
				<suppression repeatAlertInXMin="0" alertOnceInXMin="0" delayErrWarnAlertForXSec="0" repeatAlertInXPolls="0" alertOnceInXPolls="0" delayErrWarnAlertForXPolls="0" alertsPaused="False" />
				<texts>
					<header />
					<footer />
					<error />
					<warning />
					<good />
				</texts>
			</alerting>
			<!-- Collector Agents -->
			<collectorAgents agentCheckSequence="All">
				<collectorAgent name="File System Collector" type="QuickMon.Collectors.FileSystemCollector" enabled="True">
					<config>
						<directoryList>
							<directory directoryPathFilter="%userprofile%\Downloads\*.*" testDirectoryExistOnly="False" testFilesExistOnly="False" errorOnFilesExist="False" includeSubDirs="True" containsText="" useRegEx="False" warningFileCountMax="50" errorFileCountMax="100" fileSizeIndicatorUnit="Bytes" warningFileSizeMax="0" errorFileSizeMax="0" fileAgeUnit="Minute" fileMinAge="0" fileMaxAge="0" fileSizeUnit="KB" fileMinSize="0" fileMaxSize="0" showFilenamesInDetails="True" showFileCountInOutputValue="True" showFileSizeInOutputValue="False" primaryUIValue="False" />
						</directoryList>
					</config>
				</collectorAgent>
			</collectorAgents>
			<!-- Polling settings -->
			<polling enabledPollingOverride="False" onlyAllowUpdateOncePerXSec="1" enablePollFrequencySliding="False" pollSlideFrequencyAfterFirstRepeatSec="2" pollSlideFrequencyAfterSecondRepeatSec="5" pollSlideFrequencyAfterThirdRepeatSec="30" />
			<!-- Remote agent settings -->
			<remoteAgent enableRemoteExecute="False" forceRemoteExcuteOnChildCollectors="False" remoteAgentHostAddress="" remoteAgentHostPort="48191" blockParentRemoteAgentHostSettings="False" runLocalOnRemoteHostConnectionFailure="False" />
			<!-- Corrective Scripts -->
			<correctiveScripts enabled="True" onlyOnStateChange="False">
				<warning warningMinRepeatTimeMin="0" />
				<error errorMinRepeatTimeMin="0" />
				<restoration restoreMinRepeatTimeMin="0" />
			</correctiveScripts>
			<!-- Action scripts -->
			<collectorActionScripts />
			<!-- ServiceWindows -->
			<serviceWindows />
			<!-- Config variables -->
			<configVars />
			<!-- Categories -->
			<categories />
			<notes />
		</collectorHost>
	</template>
	<template name="PowerShell script" type="CollectorHost" class="CollectorHost" description="Run a PowerShell script">
		<collectorHost uniqueId="" dependOnParentId="" name="PowerShell Example" enabled="True" expandOnStart="Auto" childCheckBehaviour="OnlyRunOnSuccess" runAsEnabled="False" runAs="">
			<!-- Alerting -->
			<alerting>
				<suppression repeatAlertInXMin="0" alertOnceInXMin="0" delayErrWarnAlertForXSec="0" repeatAlertInXPolls="0" alertOnceInXPolls="0" delayErrWarnAlertForXPolls="0" alertsPaused="False" />
				<texts>
					<header />
					<footer />
					<error />
					<warning />
					<good />
				</texts>
			</alerting>
			<!-- Collector Agents -->
			<collectorAgents agentCheckSequence="All">
				<collectorAgent name="PowerShell Script Runner" type="QuickMon.Collectors.PowerShellScriptRunnerCollector" enabled="True">
					<config>
						<carvcesEntries>
							<carvceEntry name="PowerShell Test" primaryUIValue="False">
								<dataSource>"Hello"</dataSource>
								<testConditions testSequence="GWE">
									<success testType="Match">Hello</success>
									<warning testType="Contains">[any]</warning>
									<error testType="Contains">[Null]</error>
								</testConditions>
							</carvceEntry>
						</carvcesEntries>
					</config>
				</collectorAgent>
			</collectorAgents>
			<!-- Polling settings -->
			<polling enabledPollingOverride="False" onlyAllowUpdateOncePerXSec="1" enablePollFrequencySliding="False" pollSlideFrequencyAfterFirstRepeatSec="2" pollSlideFrequencyAfterSecondRepeatSec="5" pollSlideFrequencyAfterThirdRepeatSec="30" />
			<!-- Remote agent settings -->
			<remoteAgent enableRemoteExecute="False" forceRemoteExcuteOnChildCollectors="False" remoteAgentHostAddress="" remoteAgentHostPort="48191" blockParentRemoteAgentHostSettings="False" runLocalOnRemoteHostConnectionFailure="False" />
			<!-- Corrective Scripts -->
			<correctiveScripts enabled="True" onlyOnStateChange="False">
				<warning warningMinRepeatTimeMin="0" />
				<error errorMinRepeatTimeMin="0" />
				<restoration restoreMinRepeatTimeMin="0" />
			</correctiveScripts>
			<!-- Action scripts -->
			<collectorActionScripts />
			<!-- ServiceWindows -->
			<serviceWindows />
			<!-- Config variables -->
			<configVars />
			<!-- Categories -->
			<categories />
			<notes />
		</collectorHost>
	</template>
	<template name="System health Info" type="CollectorHost" class="CollectorHost" description="New Collector Host with agents for system health">
		<collectorHost uniqueId="" dependOnParentId="" name="System heath" enabled="True" expandOnStart="Auto" childCheckBehaviour="OnlyRunOnSuccess" runAsEnabled="False" runAs="">
			<!-- Alerting -->
			<alerting>
				<suppression repeatAlertInXMin="0" alertOnceInXMin="0" delayErrWarnAlertForXSec="0" repeatAlertInXPolls="0" alertOnceInXPolls="0" delayErrWarnAlertForXPolls="0" alertsPaused="False" />
				<texts>
					<header />
					<footer />
					<error />
					<warning />
					<good />
				</texts>
			</alerting>
			<!-- Collector Agents -->
			<collectorAgents agentCheckSequence="All">
				<collectorAgent name="System healh" type="QuickMon.Collectors.PerfCounterCollector" enabled="True">
					<config>
						<performanceCounters>
							<performanceCounter computer="." category="Processor" counter="% Processor Time" instance="_Total" warningValue="80" errorValue="90" numberOfSamples="1" multiSampleWaitMS="100" outputValueUnit="" primaryUIValue="False" />
							<performanceCounter computer="." category="Memory" counter="% Committed Bytes In Use" instance="" warningValue="80" errorValue="90" numberOfSamples="1" multiSampleWaitMS="100" outputValueUnit="" primaryUIValue="False" />
							<performanceCounter computer="." category="LogicalDisk" counter="% Free Space" instance="C:" warningValue="15" errorValue="5" numberOfSamples="1" multiSampleWaitMS="100" outputValueUnit="" primaryUIValue="False" />
						</performanceCounters>
					</config>
				</collectorAgent>
				<collectorAgent name="Drive space" type="QuickMon.Collectors.WMIQueryCollector" enabled="True">
					<config>
						<wmiQueries>
							<wmiQuery name="C Drive space" namespace="root\CIMV2" machineName="." primaryUIValue="False">
								<stateQuery syntax="SELECT FreeSpace FROM Win32_LogicalDisk where Caption = 'C:'" returnValueIsInt="True" returnValueInverted="True" warningValue="1048576000" errorValue="524288000" successValue="[any]" useRowCountAsValue="False" />
								<detailQuery syntax="SELECT Caption, Size, FreeSpace, Description FROM Win32_LogicalDisk where Caption = 'C:'" columnNames="Caption, Size, FreeSpace, Description" />
							</wmiQuery>
						</wmiQueries>
					</config>
				</collectorAgent>
				<collectorAgent name="Bad Blocks" type="QuickMon.Collectors.EventLogCollector" enabled="True">
					<config>
						<eventlogs>
							<log computer="." eventLog="System" typeInfo="False" typeWarn="True" typeErr="True" containsText="True" useRegEx="False" textFilter="bad" withInLastXEntries="1000" withInLastXMinutes="60" warningValue="1" errorValue="10" primaryUIValue="False">
								<sources>
									<source>disk</source>
								</sources>
								<eventIds />
							</log>
						</eventlogs>
					</config>
				</collectorAgent>
			</collectorAgents>
			<!-- Polling settings -->
			<polling enabledPollingOverride="False" onlyAllowUpdateOncePerXSec="1" enablePollFrequencySliding="False" pollSlideFrequencyAfterFirstRepeatSec="2" pollSlideFrequencyAfterSecondRepeatSec="5" pollSlideFrequencyAfterThirdRepeatSec="30" />
			<!-- Remote agent settings -->
			<remoteAgent enableRemoteExecute="False" forceRemoteExcuteOnChildCollectors="False" remoteAgentHostAddress="" remoteAgentHostPort="48191" blockParentRemoteAgentHostSettings="False" runLocalOnRemoteHostConnectionFailure="False" />
			<!-- Corrective Scripts -->
			<correctiveScripts enabled="True" onlyOnStateChange="False">
				<warning warningMinRepeatTimeMin="0" />
				<error errorMinRepeatTimeMin="0" />
				<restoration restoreMinRepeatTimeMin="0" />
			</correctiveScripts>
			<!-- Action scripts -->
			<collectorActionScripts />
			<!-- ServiceWindows -->
			<serviceWindows />
			<!-- Config variables -->
			<configVars />
			<!-- Categories -->
			<categories />
			<notes />
		</collectorHost>
	</template>
	<template name="Temp directories checks" type="CollectorHost" class="CollectorHost" description="Temp directories checks">
		<collectorHost uniqueId="" name="Temp files check" enabled="True" expandOnStart="True" dependOnParentId="" agentCheckSequence="All" childCheckBehaviour="OnlyRunOnSuccess" repeatAlertInXMin="0" alertOnceInXMin="0" delayErrWarnAlertForXSec="0" repeatAlertInXPolls="0" alertOnceInXPolls="0" delayErrWarnAlertForXPolls="0" correctiveScriptDisabled="False" correctiveScriptOnWarningPath="" correctiveScriptOnErrorPath="" restorationScriptPath="" correctiveScriptsOnlyOnStateChange="False" enableRemoteExecute="False" forceRemoteExcuteOnChildCollectors="False" remoteAgentHostAddress="" remoteAgentHostPort="48191" blockParentRemoteAgentHostSettings="False" runLocalOnRemoteHostConnectionFailure="False" enabledPollingOverride="False" onlyAllowUpdateOncePerXSec="1" enablePollFrequencySliding="False" pollSlideFrequencyAfterFirstRepeatSec="2" pollSlideFrequencyAfterSecondRepeatSec="5" pollSlideFrequencyAfterThirdRepeatSec="30" alertsPaused="False">
			<!-- CollectorAgents -->
			<collectorAgents>
				<collectorAgent name="File System" type="FileSystemCollector" enabled="True">
					<config>
						<directoryList>
							<directory directoryPathFilter="%windir%\Temp\*.*" testDirectoryExistOnly="False" testFilesExistOnly="False" errorOnFilesExist="False" containsText="" useRegEx="False" warningFileCountMax="100" errorFileCountMax="1000" fileSizeIndicatorUnit="MB" warningFileSizeMax="50" errorFileSizeMax="100" fileAgeUnit="Minute" fileMinAge="0" fileMaxAge="0" fileSizeUnit="KB" fileMinSize="0" fileMaxSize="0" showFilenamesInDetails="False" />
							<directory directoryPathFilter="%USERPROFILE%\AppData\Local\Temp\*.*" testDirectoryExistOnly="False" testFilesExistOnly="False" errorOnFilesExist="False" containsText="" useRegEx="False" warningFileCountMax="200" errorFileCountMax="500" fileSizeIndicatorUnit="MB" warningFileSizeMax="50" errorFileSizeMax="100" fileAgeUnit="Minute" fileMinAge="0" fileMaxAge="0" fileSizeUnit="KB" fileMinSize="0" fileMaxSize="0" showFilenamesInDetails="False" />
						</directoryList>
					</config>
				</collectorAgent>
			</collectorAgents>
			<!-- ServiceWindows -->
			<serviceWindows>
			</serviceWindows>
			<!-- Config variables -->
			<configVars>
			</configVars>
		</collectorHost>
	</template>
	<template name="Drive space (C:)" type="CollectorAgent" class="QuickMon.Collectors.WMIQueryCollector" description="Disk free space check">
		<collectorAgent name="Drive space" type="QuickMon.Collectors.WMIQueryCollector" enabled="True">
			<config>
				<wmiQueries>
					<wmiQuery name="C Drive space" namespace="root\CIMV2" machineName="." primaryUIValue="False">
						<stateQuery syntax="SELECT FreeSpace FROM Win32_LogicalDisk where Caption = 'C:'" returnValueIsInt="True" returnValueInverted="True" warningValue="1048576000" errorValue="524288000" successValue="[any]" useRowCountAsValue="False" />
						<detailQuery syntax="SELECT Caption, Size, FreeSpace, Description FROM Win32_LogicalDisk where Caption = 'C:'" columnNames="Caption, Size, FreeSpace, Description" />
					</wmiQuery>
				</wmiQueries>
			</config>
		</collectorAgent>
	</template>
	<template name="FireFox version" type="CollectorAgent" class="QuickMon.Collectors.PowerShellScriptRunnerCollector" description="FireFox version">
		<collectorAgent name="PowerShell Script Runner" type="QuickMon.Collectors.PowerShellScriptRunnerCollector" enabled="True">
			<config>
				<carvcesEntries>
					<carvceEntry name="Firefox version test" primaryUIValue="False">
						<dataSource>function GetFFNewestVer() {
    $ver = "N/A"
    $site = Invoke-WebRequest -uri "https://www.mozilla.org/en-US/firefox/releases/"
    if ($site.Content.Contains("data-latest-firefox=")){
        $ver = $site.Content.Substring($site.Content.IndexOf("data-latest-firefox=")+21)
        $ver = $ver.Substring(0,$ver.IndexOf('"'))    
    }
    return $ver
}
$ver = GetFFNewestVer
#"Latest version available: " + $ver
$localVer = (Get-ItemProperty -Path 'HKCU:\SOFTWARE\Mozilla\Mozilla Firefox').'(default)'
# $localVer = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\MozillaMaintenanceService').DisplayVersion
$localVer
if ($ver -ne $localVer){
    "This computer does not have the latest version"
}
else {
    "This computer has the latest version"
}</dataSource>
							<testConditions testSequence="GWE">
								<success testType="Contains">This computer has the latest version</success>
								<warning testType="Match">This computer does not have the latest version</warning>
								<error testType="Match">[any]</error>
							</testConditions>
						</carvceEntry>
					</carvcesEntries>
				</config>
			</collectorAgent>
		</template>
		<template name="Percentage Disk Time (C:)" type="CollectorAgent" class="QuickMon.Collectors.PerfCounterCollector" description="Measuring how busy a disk drive is.">
			<collectorAgent name="PerfCounter" type="QuickMon.Collectors.PerfCounterCollector" enabled="True">
				<config>
					<performanceCounters>
						<performanceCounter computer="." category="LogicalDisk" counter="% Disk Time" instance="C:" warningValue="80" errorValue="99" numberOfSamples="2" multiSampleWaitMS="100" outputValueUnit="%" primaryUIValue="False" />
					</performanceCounters>
				</config>
			</collectorAgent>
		</template>
		<template name="Ping default gateway" type="CollectorAgent" class="QuickMon.Collectors.PowerShellScriptRunnerCollector" description="Ping default gateway">
			<collectorAgent name="PowerShell Script Runner" type="QuickMon.Collectors.PowerShellScriptRunnerCollector" enabled="True">
				<config>
					<carvcesEntries>
						<carvceEntry name="Ping Default Gateway" primaryUIValue="False">
							<dataSource>$defaultGateWay = ''
$nics = Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.DefaultIPGateway -ne $null } | select DefaultIPGateway 
if ($nics -ne $null) {
    $defaultGateWay = $nics[0].DefaultIPGateway
}
$defaultGateWay
if (Test-Connection -ComputerName $defaultGateWay -Count 1 -Quiet) {
    "Success $defaultGateWay"
}
else {
    "Fail"
}</dataSource>
								<testConditions testSequence="GEW">
									<success testType="Contains">Success</success>
									<warning testType="Match">[null]</warning>
									<error testType="Contains">Fail</error>
								</testConditions>
							</carvceEntry>
						</carvcesEntries>
					</config>
				</collectorAgent>
			</template>
			<template name="Ping DNS servers" type="CollectorAgent" class="QuickMon.Collectors.PowerShellScriptRunnerCollector" description="Ping DNS servers">
				<collectorAgent name="PowerShell Script Runner" type="QuickMon.Collectors.PowerShellScriptRunnerCollector" enabled="True">
					<config>
						<carvcesEntries>
							<carvceEntry name="PowerShell Test" primaryUIValue="False">
								<dataSource>$DNSServerSearchOrder = ''
$nics = Get-WmiObject Win32_NetworkAdapterConfiguration | Where-Object { $_.DefaultIPGateway -ne $null } | select DNSServerSearchOrder 
if ($nics -ne $null) {
    $DNSServerSearchOrder = $nics[0].DNSServerSearchOrder
}
$DNSServerSearchOrder
$Total = 0
$Success = 0
$DNSServerSearchOrder | % {
    $Total++
    if (Test-Connection -ComputerName $_ -Count 1 -Quiet) {
        $Success++
    }
}
if ($Total -eq $Success) {
    "Success"
}
else {
    if ($Success -gt 0 -and $Total -gt $Success){
        "Partial"
    }
    else 
    {
        "Fail"
    }
}</dataSource>
									<testConditions testSequence="GWE">
										<success testType="Contains">Success</success>
										<warning testType="Contains">Partial</warning>
										<error testType="Contains">Fail</error>
									</testConditions>
								</carvceEntry>
							</carvcesEntries>
						</config>
					</collectorAgent>
				</template>
				<template name="Total Network usage KB/s" type="CollectorAgent" class="QuickMon.Collectors.PowerShellScriptRunnerCollector" description="Total Network usage KB/s">
					<collectorAgent name="PowerShell Script Runner" type="QuickMon.Collectors.PowerShellScriptRunnerCollector" enabled="True">
						<config>
							<carvcesEntries>
								<carvceEntry name="Calc Network usage" primaryUIValue="False">
									<dataSource>$totalBytes = 0
Get-Counter -Counter "\Network Interface(*)\Bytes Total/sec" | % {
    $_.CounterSamples | select CookedValue | % {        
        $totalBytes = $totalBytes + $_.CookedValue
    }
}
$KBps = ($totalBytes / 1024)
$KBpsFormat = $KBps.ToString("0")
"$KBpsFormat KB/sec"
" "
if ($KBps -lt 400) {
    "Good"
}
else { 
    if ($KBps -lt 800) {
    "Warning"
    }
    else {
    "Error"
    }
}</dataSource>
						<testConditions testSequence="GWE">
							<success testType="Contains">Good</success>
							<warning testType="Contains">Warning</warning>
							<error testType="Contains">Error</error>
						</testConditions>
					</carvceEntry>
				</carvcesEntries>
			</config>
		</collectorAgent>
	</template>
	<template name="Eventlog Notifier" type="NotifierHost" class="NotifierHost" description="Eventlog Notifier">
		<notifierHost name="Eventlog Notifier" enabled="True" alertLevel="Warning" detailLevel="Detail" attendedOptionOverride="OnlyAttended">
			<!-- collectorHosts -->
			<collectorHosts />
			<!-- ServiceWindows -->
			<serviceWindows />
			<!-- Categories -->
			<categories>
				<category>*</category>
			</categories>
			<!-- Config variables -->
			<configVars />
			<recordOnHosts />
			<!-- notifierAgents -->
			<notifierAgents>
				<notifierAgent name="Event Log Notifier" type="QuickMon.Notifiers.EventLogNotifier" enabled="True">
					<config>
						<eventLog computer="." eventLog="Application" eventSource="QuickMon" successEventID="0" warningEventID="1" errorEventID="2" />
					</config>
				</notifierAgent>
			</notifierAgents>
		</notifierHost>
	</template>
	<template name="Log file Notifier" type="NotifierHost" class="NotifierHost" description="Log file Notifier">
		<notifierHost name="Log file Notifier" enabled="True" alertLevel="Warning" detailLevel="Detail" attendedOptionOverride="OnlyAttended">
			<!-- collectorHosts -->
			<collectorHosts />
			<!-- ServiceWindows -->
			<serviceWindows />
			<!-- Categories -->
			<categories>
				<category>*</category>
			</categories>
			<!-- Config variables -->
			<configVars />
			<recordOnHosts />
			<!-- notifierAgents -->
			<notifierAgents>
				<notifierAgent name="Log File Notifier" type="QuickMon.Notifiers.LogFileNotifier" enabled="True">
					<config>
						<logFile path="c:\Temp\QuickMonLog.log" createNewFileSizeKB="0" />
					</config>
				</notifierAgent>
			</notifierAgents>
		</notifierHost>
	</template>
	<template name="SMTP Notifier" type="NotifierHost" class="NotifierHost" description="SMTP Notifier">
		<notifierHost name="SMTP Notifier" enabled="True" alertLevel="Warning" detailLevel="Detail" attendedOptionOverride="OnlyAttended">
			<!-- collectorHosts -->
			<collectorHosts />
			<!-- ServiceWindows -->
			<serviceWindows />
			<!-- Categories -->
			<categories>
				<category>*</category>
			</categories>
			<!-- Config variables -->
			<configVars />
			<recordOnHosts />
			<!-- notifierAgents -->
			<notifierAgents>
				<notifierAgent name="SMTP Notifier" type="QuickMon.Notifiers.SMTPNotifier" enabled="True">
					<config>
						<smtp hostServer="smtp.somewhere.com" useDefaultCredentials="True" domain="" userName="" password="" fromAddress="user.account@somewhere.com" toAddress="user.account@somewhere.com" senderAddress="user.account@somewhere.com" replyToAddress="user.account@somewhere.com" mailPriority="0" useTLS="False" isBodyHtml="True" port="25" subject="%AlertLevel% - %CollectorName%" body="QuickMon alert raised for &lt;b&gt;'%CollectorName%'&lt;/b&gt;&lt;br /&gt;&#xD;&#xA;&lt;b&gt;Date Time:&lt;/b&gt; %DateTime%&lt;br /&gt;&#xD;&#xA;&lt;b&gt;Current state:&lt;/b&gt; %CurrentState%&lt;br /&gt;&#xD;&#xA;&lt;b&gt;Agents:&lt;/b&gt; %CollectorAgents%&lt;br /&gt;&#xD;&#xA;&lt;b&gt;Details&lt;/b&gt;&lt;blockquote&gt;%Details%&lt;/blockquote&gt;" />
					</config>
				</notifierAgent>
			</notifierAgents>
		</notifierHost>
	</template>
</quickMonTemplate>
