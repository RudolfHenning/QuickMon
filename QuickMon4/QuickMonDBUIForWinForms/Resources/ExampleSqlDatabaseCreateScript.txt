USE [QuickMon4]
GO
CREATE TABLE [dbo].[States](
	[StateId] [tinyint] NOT NULL,
	[Description] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_States] PRIMARY KEY CLUSTERED 
(
	[StateId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE TABLE [dbo].[AlertLevels](
	[AlertLevel] [tinyint] NOT NULL,
	[Description] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_AlertLevels] PRIMARY KEY CLUSTERED 
(
	[AlertLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE TABLE [dbo].[Collectors](
	[CollectorId] [int] IDENTITY(1,1) NOT NULL,
	[Collector] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_Collectors] PRIMARY KEY CLUSTERED 
(
	[CollectorId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE TABLE [dbo].[AlertMessages](
	[MessageId] [int] IDENTITY(1,1) NOT NULL,
	[AlertLevel] [tinyint] NOT NULL,
	[CollectorId] [int] NOT NULL,
	[PreviousState] [tinyint] NOT NULL,
	[CurrentState] [tinyint] NOT NULL,
	[Details] [nvarchar](max) NOT NULL,
	[InsertDate] [datetime] NOT NULL,
 CONSTRAINT [PK_AlertMessages] PRIMARY KEY CLUSTERED 
(
	[MessageId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE PROCEDURE [dbo].[InsertMessage]
(
	@AlertLevel tinyint,
	@Collector nvarchar(255),
	@PreviousState tinyint,
	@CurrentState tinyint,
	@Details nvarchar(MAX)
)
AS
BEGIN
  declare @CollectorId int
 
  if (@Collector is null)
	set @Collector = 'None'
  Select @CollectorId = CollectorId from Collectors where Collector = @Collector
  if (@CollectorId is null)
  begin
	 Insert Collectors(Collector) values (@Collector)
	 Select @CollectorId = CollectorId from Collectors where Collector = @Collector
  end  
  
  INSERT AlertMessages(AlertLevel, CollectorId, PreviousState, CurrentState , Details)
  Values (@AlertLevel, @CollectorId, @PreviousState, @CurrentState , @Details)
END
GO
CREATE VIEW [dbo].[vAlertMessages]
AS
SELECT     dbo.AlertMessages.MessageId, dbo.AlertLevels.Description AS AlertLevel, dbo.Collectors.Collector, dbo.States.Description AS PreviousState, 
					  States_1.Description AS CurrentState, dbo.AlertMessages.Details, dbo.AlertMessages.InsertDate, dbo.Collectors.CollectorId, 
					  dbo.AlertLevels.AlertLevel AS AlertLevelId, States_1.StateId
FROM         dbo.AlertMessages INNER JOIN
					  dbo.Collectors ON dbo.AlertMessages.CollectorId = dbo.Collectors.CollectorId INNER JOIN
					  dbo.AlertLevels ON dbo.AlertMessages.AlertLevel = dbo.AlertLevels.AlertLevel INNER JOIN
					  dbo.States ON dbo.AlertMessages.PreviousState = dbo.States.StateId INNER JOIN
					  dbo.States AS States_1 ON dbo.AlertMessages.CurrentState = States_1.StateId
GO
CREATE proc [dbo].[QueryMessages]
(
	@top int,
	@FromDate datetime, 
	@ToDate datetime,
	@AlertLevel tinyint, 
	@Collector nvarchar(255),
	@CurrentState tinyint,
	@Details nvarchar(255)
)
as
  SELECT top(@top) 
	[InsertDate],
	[AlertLevel],
	[Collector],
	[PreviousState],
	[CurrentState],
	[Details]
  FROM
	[vAlertMessages]
  WHERE 
	[InsertDate] between @FromDate and @ToDate and
	(@AlertLevel is null or AlertLevelId >= @AlertLevel) and
	(@Collector is null or Collector like @Collector) and
	(@CurrentState is null or StateId = @CurrentState) and
	(@Details is null or [Details] like @Details)
  ORDER BY
	[InsertDate] desc
GO
ALTER TABLE [dbo].[AlertMessages] ADD  CONSTRAINT [DF_AlertMessages_AlertLevel]  DEFAULT ((0)) FOR [AlertLevel]
GO
ALTER TABLE [dbo].[AlertMessages] ADD  CONSTRAINT [DF_AlertMessages_PreviousState]  DEFAULT ((0)) FOR [PreviousState]
GO
ALTER TABLE [dbo].[AlertMessages] ADD  CONSTRAINT [DF_AlertMessages_CurrentState]  DEFAULT ((0)) FOR [CurrentState]
GO
ALTER TABLE [dbo].[AlertMessages] ADD  CONSTRAINT [DF_AlertMessages_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
ALTER TABLE [dbo].[AlertMessages]  WITH CHECK ADD  CONSTRAINT [FK_AlertMessages_AlertLevels] FOREIGN KEY([AlertLevel])
REFERENCES [dbo].[AlertLevels] ([AlertLevel])
GO
ALTER TABLE [dbo].[AlertMessages] CHECK CONSTRAINT [FK_AlertMessages_AlertLevels]
GO
ALTER TABLE [dbo].[AlertMessages]  WITH CHECK ADD  CONSTRAINT [FK_AlertMessages_Collectors] FOREIGN KEY([CollectorId])
REFERENCES [dbo].[Collectors] ([CollectorId])
GO
ALTER TABLE [dbo].[AlertMessages] CHECK CONSTRAINT [FK_AlertMessages_Collectors]
GO
ALTER TABLE [dbo].[AlertMessages]  WITH CHECK ADD  CONSTRAINT [FK_AlertMessages_CurrentState] FOREIGN KEY([CurrentState])
REFERENCES [dbo].[States] ([StateId])
GO
ALTER TABLE [dbo].[AlertMessages] CHECK CONSTRAINT [FK_AlertMessages_CurrentState]
GO
ALTER TABLE [dbo].[AlertMessages]  WITH CHECK ADD  CONSTRAINT [FK_AlertMessages_PreviousState] FOREIGN KEY([PreviousState])
REFERENCES [dbo].[States] ([StateId])
GO
ALTER TABLE [dbo].[AlertMessages] CHECK CONSTRAINT [FK_AlertMessages_PreviousState]
GO
INSERT [dbo].[States] ([StateId], [Description]) VALUES (0, N'Not Available')
INSERT [dbo].[States] ([StateId], [Description]) VALUES (1, N'Good')
INSERT [dbo].[States] ([StateId], [Description]) VALUES (2, N'Warning')
INSERT [dbo].[States] ([StateId], [Description]) VALUES (3, N'Error')
INSERT [dbo].[States] ([StateId], [Description]) VALUES (4, N'Disabled')
INSERT [dbo].[States] ([StateId], [Description]) VALUES (5, N'Configuration Error')
SET IDENTITY_INSERT [dbo].[Collectors] ON
INSERT [dbo].[Collectors] ([CollectorId], [Collector]) VALUES (1, N'None')
SET IDENTITY_INSERT [dbo].[Collectors] OFF
INSERT [dbo].[AlertLevels] ([AlertLevel], [Description]) VALUES (0, N'Debug')
INSERT [dbo].[AlertLevels] ([AlertLevel], [Description]) VALUES (1, N'Information')
INSERT [dbo].[AlertLevels] ([AlertLevel], [Description]) VALUES (2, N'Warning')
INSERT [dbo].[AlertLevels] ([AlertLevel], [Description]) VALUES (3, N'Error')
INSERT [dbo].[AlertLevels] ([AlertLevel], [Description]) VALUES (4, N'Crisis')
grant execute on dbo.QueryMessages to public
GO
grant execute on dbo.InsertMessage to public
GO