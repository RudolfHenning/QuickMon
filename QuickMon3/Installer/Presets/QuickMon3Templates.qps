<?xml version="1.0" encoding="UTF-8"?>
<qmpresets>
<preset class="PerfCounterCollector" description="% Page File usage">
<config><performanceCounters><performanceCounter computer="." category="Paging File" counter="% Usage" instance="_Total" returnValueInverted="False" warningValue="50" errorValue="70" /></performanceCounters></config>
</preset>
<preset class="SqlQueryCollector" description="BizTalk tracking switched off">
<config><queries><query name="Receive ports" sqlServer="{BizTalkMgmtDBSrverName}" database="BizTalkMgmtDb" integratedSec="True" userName="" password="" cmndTimeOut="60" usePersistentConnection="False" applicationName=""><summaryQuery useSP="False" returnValueIsNumber="True" returnValueInverted="False" warningValue="1" errorValue="[null]" successValue="0" useRowCountAsValue="False" useExecuteTimeAsValue="False">SELECT count(*)
  FROM [bts_receiveport]
  where 
	[nTracking] &gt; 0</summaryQuery><detailQuery useSP="False">SELECT nvcName, nTracking, DateModified
  FROM [bts_receiveport]
  where 
	[nTracking] &gt; 0</detailQuery></query><query name="Send ports" sqlServer="{BizTalkMgmtDBSrverName}" database="BizTalkMgmtDb" integratedSec="True" userName="" password="" cmndTimeOut="60" usePersistentConnection="False" applicationName=""><summaryQuery useSP="False" returnValueIsNumber="True" returnValueInverted="False" warningValue="1" errorValue="[any]" successValue="0" useRowCountAsValue="False" useExecuteTimeAsValue="False">select count(*)
from [dbo].[bts_sendport]
where nTracking &gt; 0</summaryQuery><detailQuery useSP="False">select [nvcName], nTracking, DateModified
from [dbo].[bts_sendport]
where nTracking &gt; 0</detailQuery></query><query name="Orchestrations" sqlServer="{BizTalkMgmtDBSrverName}" database="BizTalkMgmtDb" integratedSec="True" userName="" password="" cmndTimeOut="60" usePersistentConnection="False" applicationName=""><summaryQuery useSP="False" returnValueIsNumber="True" returnValueInverted="False" warningValue="1" errorValue="[any]" successValue="0" useRowCountAsValue="False" useExecuteTimeAsValue="False">select count(*)
from [dbo].[StaticTrackingInfo]
where
    cast(cast(imgdata as varbinary) as int) &gt; 0
    and uidServiceId in (select uidGUID from [dbo].[bts_orchestration])</summaryQuery><detailQuery useSP="False">select strServiceName
from [dbo].[StaticTrackingInfo]
where  
cast(cast(imgdata as varbinary) as int) &gt; 0
and uidServiceId in (select uidGUID from [dbo].[bts_orchestration])</detailQuery></query><query name="Pipelines" sqlServer="{BizTalkMgmtDBSrverName}" database="BizTalkMgmtDb" integratedSec="True" userName="" password="" cmndTimeOut="60" usePersistentConnection="False" applicationName=""><summaryQuery useSP="False" returnValueIsNumber="True" returnValueInverted="False" warningValue="1" errorValue="[any]" successValue="" useRowCountAsValue="False" useExecuteTimeAsValue="False">select count(*)
from [dbo].[StaticTrackingInfo]
where
    cast(cast(imgdata as varbinary) as int) &gt; 0 
	and cast(cast(imgdata as varbinary) as int) &lt;&gt; 268435456
    and uidServiceId in (select [PipelineID] from [dbo].[bts_pipeline])</summaryQuery><detailQuery useSP="False">select strServiceName,
	cast(cast(imgdata as varbinary) as int) as [Tracking]
from [dbo].[StaticTrackingInfo]
where
    cast(cast(imgdata as varbinary) as int) &gt; 0 
	and cast(cast(imgdata as varbinary) as int) &lt;&gt; 268435456
    and uidServiceId in (select [PipelineID] from [dbo].[bts_pipeline])</detailQuery></query></queries></config>
</preset>
<preset class="WMIQueryCollector" description="C drive free space (WMI)">
<config><wmiQueries><wmiQuery name="C drive space left" namespace="root\CIMV2" machineName="."><stateQuery syntax="select FreeSpace from Win32_LogicalDisk where Caption = 'C:'" returnValueIsInt="True" returnValueInverted="True" warningValue="16106127360" errorValue="10737418240" successValue="[any]" useRowCountAsValue="False" /><detailQuery syntax="select FreeSpace from Win32_LogicalDisk where Caption = 'C:'" columnNames="" /></wmiQuery></wmiQueries></config>
</preset>
<preset class="BizTalkPortAndOrchsCollector" description="Check all BizTalk Ports and Orchs are running">
<config><bizTalkGroup sqlServer="%LocalHost%" mgmtDb="BizTalkMgmtDb" allReceiveLocations="True" allSendPorts="True" allOrchestrations="True"><receiveLocations></receiveLocations><sendPorts></sendPorts><orchestrations></orchestrations></bizTalkGroup></config>
</preset>
<preset class="BizTalkSuspendedCountCollector" description="Check BizTalk for any suspended instances">
<config><bizTalkGroup sqlServer="%LocalHost%" mgmtDb="BizTalkMgmtDb" instancesWarning="1" instancesError="10" allHostsApps="True" showLastXDetails="10" raiseHtmlAlerts="True"><hosts /><apps /></bizTalkGroup></config>
</preset>
<preset class="PowerShellScriptRunnerCollector" description="Check CGI object count">
<config><powerShellScripts><powerShellScriptRunner name="Get GDI object count" returnCheckSequence="GWE"><testScript>#"Number of GUI handles per process"
$sig = @'
[DllImport("User32.dll")]
public static extern int GetGuiResources(IntPtr hProcess, int uiFlags);
'@

Add-Type -MemberDefinition $sig -name NativeMethods -namespace Win32

$processes = [System.Diagnostics.Process]::GetProcesses()
[int]$gdiHandleCount = 0
ForEach ($p in $processes)
{
    try{
        $gdiHandles = [Win32.NativeMethods]::GetGuiResources($p.Handle, 0)
        $gdiHandleCount += $gdiHandles
        #$p.Name + " : " + $gdiHandles.ToString()   
    }
    catch {

    }
}
if ( $gdiHandleCount -le 5000){
   "OK - " + $gdiHandleCount.ToString()
}
else {
   "Fail - " + $gdiHandleCount.ToString()
}</testScript><goodScript resultMatchType="Contains">OK</goodScript><warningScript resultMatchType="Contains">Fail</warningScript><errorScript resultMatchType="Match">[any]</errorScript></powerShellScriptRunner></powerShellScripts></config>
</preset>
<preset class="EventLogCollector" description="Check for bad blocks on disk">
<config><eventlogs><log computer="%LocalHost%" eventLog="System" typeInfo="False" typeWarn="True" typeErr="True" containsText="True" textFilter="bad" withInLastXEntries="1000" withInLastXMinutes="60" warningValue="1" errorValue="10"><sources><source>disk</source></sources><eventIds /></log></eventlogs></config>
</preset>
<preset class="SqlDatabaseSizeCollector" description="Check QuickMon 3 database size">
<config><databases><database name="QuickMon3" server="%LocalHost%" integratedSec="True" userName="" password="" sqlCmndTimeOutSec="60" warningValueMB="100" errorValueMB="1024" /></databases></config>
</preset>
<preset class="SqlTableSizeCollector" description="Check QuickMon AlertMessages table size in SQL Server">
<config><databases><database name="QuickMon3" server="%LocalHost%" integratedSec="True" userName="" password="" sqlCmndTimeOutSec="60"><table name="AlertMessages" warningValue="100000" errorValue="1000000" /></database></databases></config>
</preset>
<preset class="SqlQueryCollector" description="Check QuickMon AlertMessages Warnings/Errors count in SQL Server">
<config><queries><query name="QuickMon test" sqlServer="%LocalHost%" database="QuickMon3" integratedSec="True" userName="" password="" cmndTimeOut="60" usePersistentConnection="False" applicationName=""><summaryQuery useSP="False" returnValueIsNumber="True" returnValueInverted="False" warningValue="100000" errorValue="1000000" successValue="" useRowCountAsValue="False" useExecuteTimeAsValue="False">select count(*) from AlertMessages where AlertLevel &gt; 1</summaryQuery><detailQuery useSP="False">select count(*) as [Rows] from AlertMessages where AlertLevel &gt; 1</detailQuery></query></queries></config>
</preset>
<preset class="WMIQueryCollector" description="D drive free space (WMI)">
<config><wmiQueries><wmiQuery name="D drive space left" namespace="root\CIMV2" machineName="."><stateQuery syntax="select FreeSpace from Win32_LogicalDisk where Caption = 'D:'" returnValueIsInt="True" returnValueInverted="True" warningValue="16106127360" errorValue="10737418240" successValue="[any]" useRowCountAsValue="False" /><detailQuery syntax="select FreeSpace from Win32_LogicalDisk where Caption = 'D:'" columnNames="" /></wmiQuery></wmiQueries></config>
</preset>
<preset class="WMIQueryCollector" description="E drive free space (WMI)">
<config><wmiQueries><wmiQuery name="E drive space left" namespace="root\CIMV2" machineName="."><stateQuery syntax="select FreeSpace from Win32_LogicalDisk where Caption = 'E:'" returnValueIsInt="True" returnValueInverted="True" warningValue="16106127360" errorValue="10737418240" successValue="[any]" useRowCountAsValue="False" /><detailQuery syntax="select FreeSpace from Win32_LogicalDisk where Caption = 'E:'" columnNames="" /></wmiQuery></wmiQueries></config>
</preset>
<preset class="PerfCounterCollector" description="General System health">
<config><performanceCounters><performanceCounter computer="." category="Processor" counter="% Processor Time" instance="_Total" returnValueInverted="False" warningValue="90" errorValue="99" /><performanceCounter computer="." category="Memory" counter="% Committed Bytes In Use" instance="" returnValueInverted="False" warningValue="80" errorValue="90" /><performanceCounter computer="." category="LogicalDisk" counter="% Free Space" instance="C:" returnValueInverted="True" warningValue="15" errorValue="5" /></performanceCounters></config>
</preset>
<preset class="IISAppPoolCollector" description="IIS - Is default App pool running">
<config><machine name="localhost" usePerfCounter="True"><appPool name="DefaultAppPool" /></machine></config>
</preset>
<preset class="InMemoryNotifier" description="In Memory">
<config><inMemory maxEntryCount="99999" /></config>
</preset>
<preset class="ServiceStateCollector" description="Is MSSQL Service running">
<config><machine name="."><service name="SQL Server" /></machine></config>
</preset>
<preset class="WMIQueryCollector" description="Is network up">
<config><wmiQueries><wmiQuery name="Is network up" namespace="root\CIMV2" machineName="."><stateQuery syntax="select NetConnectionStatus  from Win32_NetworkAdapter where NetConnectionID = 'Local Area Connection'" returnValueIsInt="False" returnValueInverted="False" warningValue="0" errorValue="[any]" successValue="2" useRowCountAsValue="False" /><detailQuery syntax="select Caption, Speed, NetEnabled, NetConnectionStatus, MACAddress  from Win32_NetworkAdapter where NetConnectionID = 'Local Area Connection'" columnNames="" /></wmiQuery></wmiQueries></config>
</preset>
<preset class="PowerShellScriptRunnerCollector" description="Is PowerShell 2 (or later) installed">
<config><powerShellScripts><powerShellScriptRunner name="PowerShell 4" returnCheckSequence="GWE"><testScript>if ($host.Version.Major -ge 2){
   "Success. Version: " + $host.Version.ToString()
}
else {
   "Fail. Version: " + $host.Version.Major
}
</testScript><goodScript resultMatchType="Contains">Success</goodScript><warningScript resultMatchType="Match">[null]</warningScript><errorScript resultMatchType="Match">[any]</errorScript></powerShellScriptRunner></powerShellScripts></config>
</preset>
<preset class="PowerShellScriptRunnerCollector" description="Is PowerShell 4 installed">
<config><powerShellScripts><powerShellScriptRunner name="PowerShell 4" returnCheckSequence="GWE"><testScript>if ($host.Version.Major -ge 4){
   "Success. Version: " + $host.Version.ToString()
}
else {
   "Fail. Version: " + $host.Version.Major
}
						</testScript><goodScript resultMatchType="Contains">Success</goodScript><warningScript resultMatchType="Match">[null]</warningScript><errorScript resultMatchType="Match">[any]</errorScript></powerShellScriptRunner></powerShellScripts></config>
</preset>
<preset class="FileSystemCollector" description="Is QuickMon 3 installed">
<config><directoryList><directory directoryPathFilter="C:\Program Files\Hen IT\QuickMon 3\*.config" testDirectoryExistOnly="True" testFilesExistOnly="True" errorOnFilesExist="False" warningFileCountMax="0" errorFileCountMax="0" warningFileSizeMaxKB="0" errorFileSizeMaxKB="0" fileMinAgeSec="0" fileMaxAgeSec="0" fileMinSizeKB="0" fileMaxSizeKB="0" /></directoryList></config>
</preset>
<preset class="RegistryQueryCollector" description="Is QuickMon Monitor pack file type registered">
<config><queries><query name="QuickMon Monitor pack file type registered" useRemoteServer="False" server="" registryHive="ClassesRoot" path="QuickMon3\shell\open\command" keyName="" expandEnvironmentNames="False" returnValueIsNumber="False" successValue="[exists]" warningValue="[any]" errorValue="[notExists]" returnValueInARange="False" returnValueInverted="False" /></queries></config>
</preset>
<preset class="ServiceStateCollector" description="Is QuickMon Service running">
<config><machine name="."><service name="QuickMon 3 Service" /></machine></config>
</preset>
<preset class="LogFileNotifier" description="Log File">
<config><logFile path="c:\QuickMon.log" createNewFileSizeKB="0" /></config>
</preset>
<preset class="WMIQueryCollector" description="Page file hog processes">
<config><wmiQueries><wmiQuery name="Page file hog processes" namespace="root\CIMV2" machineName="."><stateQuery syntax="select * from Win32_Process where PageFileUsage &gt; 500000" returnValueIsInt="True" returnValueInverted="False" warningValue="1" errorValue="2" successValue="0" useRowCountAsValue="True" /><detailQuery syntax="select PageFileUsage,&#xD;&#xA;CommandLine,CreationClassName,CSCreationClassName,CSName,Description,ExecutablePath,ExecutionState,Handle,HandleCount,InstallDate,KernelModeTime,MaximumWorkingSetSize,MinimumWorkingSetSize,Name,OSCreationClassName,OSName,OtherOperationCount,OtherTransferCount,PageFaults,ParentProcessId,PeakPageFileUsage,PeakVirtualSize,PeakWorkingSetSize,Priority,PrivatePageCount,ProcessId,QuotaNonPagedPoolUsage,QuotaPagedPoolUsage,QuotaPeakNonPagedPoolUsage,QuotaPeakPagedPoolUsage,ReadOperationCount,ReadTransferCount,SessionId,Status,TerminationDate,ThreadCount,UserModeTime,VirtualSize,WindowsVersion,WorkingSetSize,WriteOperationCount,WriteTransferCount&#xD;&#xA;from Win32_Process where PageFileUsage &gt; 500000" columnNames="PageFileUsage, CommandLine, CreationClassName, CSCreationClassName, CSName, Description, ExecutablePath, ExecutionState, Handle, HandleCount, InstallDate, KernelModeTime, MaximumWorkingSetSize, MinimumWorkingSetSize, Name, OSCreationClassName, OSName, OtherOperationCount, OtherTransferCount, PageFaults, ParentProcessId, PeakPageFileUsage, PeakVirtualSize, PeakWorkingSetSize, Priority, PrivatePageCount, ProcessId, QuotaNonPagedPoolUsage, QuotaPagedPoolUsage, QuotaPeakNonPagedPoolUsage, QuotaPeakPagedPoolUsage, ReadOperationCount, ReadTransferCount, SessionId, Status, TerminationDate, ThreadCount, UserModeTime, VirtualSize, WindowsVersion, WorkingSetSize, WriteOperationCount, WriteTransferCount" /></wmiQuery></wmiQueries></config>
</preset>
<preset class="PingCollector" description="Ping Google">
<config><hostAddress><entry pingMethod="Http" address="http://www.google.com" description="" maxTimeMS="2000" timeOutMS="5000" httpProxyServer="" socketPort="23" receiveTimeoutMS="30000" sendTimeoutMS="30000" useTelnetLogin="False" userName="" password="" /></hostAddress></config>
</preset>
<preset class="PingCollector" description="Ping Microsoft">
<config><hostAddress><entry pingMethod="Http" address="http://www.Microsoft.com" description="" maxTimeMS="2000" timeOutMS="5000" httpProxyServer="" socketPort="23" receiveTimeoutMS="30000" sendTimeoutMS="30000" useTelnetLogin="False" userName="" password="" /></hostAddress></config>
</preset>
<preset class="SQLDatabaseNotifier" description="QuickMon Database">
<config><connection sqlServer="%LocalHost%" database="QuickMon3" integratedSec="True" userName="" password=""><command cmndTimeOut="60" useSP="True" value="InsertMessage" alertFieldName="AlertLevel" collectorTypeFieldName="CollectorType" categoryFieldName="Category" previousStateFieldName="PreviousState" currentStateFieldName="CurrentState" detailsFieldName="Details" useSPForViewer="True" viewer="QueryMessages" dateTimeFieldName="InsertDate" /></connection></config>
</preset>
<preset class="AudioNotifier" description="QuickMon sound alerts">
<config>
		<audioConfig>
				<goodState enabled="False" useSystemSounds="True" soundPath="" systemSound="1" soundRepeatCount="1" soundVolumePerc="-1" audioFilePath="" repeatCount="1" />
				<warningState enabled="True" useSystemSounds="True" soundPath="" systemSound="2" soundRepeatCount="1" soundVolumePerc="-1" audioFilePath="" repeatCount="1" />
				<errorState enabled="True" useSystemSounds="True" soundPath="" systemSound="3" soundRepeatCount="1" soundVolumePerc="-1" audioFilePath="" repeatCount="1" />
		</audioConfig>
</config>

</preset>
<preset class="WMIQueryCollector" description="System cooling fans">
<config><wmiQueries><wmiQuery name="System cooling fans running" namespace="root\CIMV2" machineName="."><stateQuery syntax="select * from Win32_Fan where (Status != 'OK')" returnValueIsInt="True" returnValueInverted="False" warningValue="1" errorValue="[any]" successValue="0" useRowCountAsValue="True" /><detailQuery syntax="select * from Win32_Fan where (Status = 'OK')" columnNames="" /></wmiQuery></wmiQueries></config>
</preset>
<preset class="EventLogNotifier" description="This computer, Event source: QuickMon">
<config><eventLog computer="." eventSource="QuickMon" successEventID="0" warningEventID="1" errorEventID="2" /></config>
</preset>
<preset class="PowerShellScriptRunnerCollector" description="Check QuickMon version &gt;= 3.21">
<config>
		<powerShellScripts>
				<powerShellScriptRunner name="Get QuickMon version (&gt; 3.21)" returnCheckSequence="GWE">
						<testScript>$filePath = "C:\Program Files\Hen IT\QuickMon 3\Quickmon.exe"
if (Test-Path $filePath){
    $versionInfo = (Get-Command $filePath).FileVersionInfo.FileVersion
    $versionArray = $versionInfo.Split(".")
    $major = [int]$versionArray[0]
    $minor = [int]$versionArray[1]
    if ($major -eq 3 -and $minor -ge 21)
    {
       "Version check OK - "  + $versionInfo.ToString()
    }
    else
    {
        "Version check fail - " + $versionInfo.ToString()
    }
}
else {
    "'" + $filePath + "' does not exist!"
}
						</testScript>
						<goodScript resultMatchType="Contains">Version check OK</goodScript>
						<warningScript resultMatchType="Contains">Version check fail</warningScript>
						<errorScript resultMatchType="Match">[any]</errorScript>
				</powerShellScriptRunner>
		</powerShellScripts>
</config>

</preset>
<preset class="PowerShellScriptRunnerCollector" description="All drive spaces including mount points">
<config><powerShellScripts><powerShellScriptRunner name="Drive spaces including mount points" returnCheckSequence="EWG"><testScript>$drives = @{}
$volumes = Get-WmiObject -Query "select * from Win32_Volume where DriveType = 3 and not(Caption like '\\%')" | select Caption, Capacity, FreeSpace
foreach ($row in $volumes) {
    $driveLetter = $row.Caption.Substring(0,3)
    if($drives.ContainsKey($driveLetter))
    {
        $obj = $drives[$driveLetter]
        $obj.Capacity += $row.Capacity
        $obj.FreeSpace += $row.FreeSpace
        $drives[$driveLetter] = $obj
    }
    else
    {
        $props = @{
            'DriveLetter' = $driveLetter
            'Capacity' = $row.Capacity
            'FreeSpace' = $row.FreeSpace
            'PercFree' = 0
            'CapacityFormatted' = ''
            'FreeSpaceFormatted' = ''
            'Status' = ''
        }
        $obj = New-Object -TypeName PSObject -Property $props
        $drives.Add($driveLetter,$obj)
    }
}
#$drives.Values
foreach($drive in $drives.Values){
    $drive.PercFree = ((100.0 * $drive.FreeSpace) / $drive.Capacity).ToString("0.00")
    $drive.CapacityFormatted = ($drive.Capacity / 1073741824).ToString("0.00 GB")
    $drive.FreeSpaceFormatted = ($drive.FreeSpace / 1073741824).ToString("0.00 GB")
    if ([int]$drive.PercFree -le 5) {
        $drive.Status = 'Error'
    }
    else {
        if ([int]$drive.PercFree -le 15){
            $drive.Status = 'Warning'
        }
        else {
            $drive.Status = 'OK'
        }
    }
}
$drives.Values | select DriveLetter, CapacityFormatted, FreeSpaceFormatted, PercFree, Status | Sort-Object DriveLetter
</testScript><goodScript resultMatchType="Contains">[any]</goodScript><warningScript resultMatchType="Contains">Warning</warningScript><errorScript resultMatchType="Contains">Error</errorScript></powerShellScriptRunner></powerShellScripts></config>
</preset>
</qmpresets>
